{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","getAll","a","axios","get","response","data","create","newObject","post","update","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","error","setError","useEffect","fetchNotes","noteService","initialNotes","setTimeout","addNote","e","preventDefault","noteObject","Math","floor","random","date","Date","toISOString","returnedNote","concat","find","changedNote","map","filter","n","key","onSubmit","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e43f1ab8.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nconst getAll = async () => {\n    const response = await axios.get(baseUrl)\n    return response.data\n}\n\nconst create = async newObject => {\n    const response = await axios.post(baseUrl, newObject)\n    return response.data\n}\n\nconst update = async (id, newObject) => {\n    const response = await axios.put(`${baseUrl}/${id}`, newObject)\n    return response.data\n}\n\nexport default {\n    getAll, create, update\n}","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important'\n\n    return (\n        <li className=\"note\">\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n    \n    return (\n        <div style={footerStyle}>\n            <br/>\n            <em>Note app, department of computer science, University of Helsinki, 2020</em>\n        </div>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        const fetchNotes = async () => {\n            const initialNotes = await noteService.getAll()\n            setNotes(initialNotes)\n        }\n\n        try {\n            fetchNotes()\n        } catch (error) {\n            setError('Initial notes could not be fetched')\n            setTimeout(() => {\n                setError(null)\n            }, 5000)\n        }\n\n    }, [])\n\n    const addNote = async e => {\n        e.preventDefault()\n\n        const noteObject = {\n            id: Math.floor(Math.random()*10000),\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5\n        }\n\n        try {\n            const returnedNote = await noteService.create(noteObject)\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        } catch (error) {\n            setError(`\"${noteObject.content}\" could not be added to the database`)\n            setTimeout(() => {\n                setError(null)\n            }, 5000)\n        }\n    }\n\n    const handleNoteChange = e => {\n        setNewNote(e.target.value)\n    }\n\n    const toggleImportance = async id => {\n        const note = notes.find(note => note.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        try {\n            const returnedNote = await noteService.update(id, changedNote)\n            setNotes(notes.map(note => note.id === id ? returnedNote : note))\n        } catch (error) {\n            setError(`The note \"${note.content}\" was already deleted from the server`)\n            setTimeout(() => {\n                setError(null)\n            }, 5000)\n            setNotes(notes.filter(n => n.id !== note.id))\n        }\n    }\n\n    const notesToShow = () => showAll ? notes : notes.filter(note => note.important)\n\n    const renderNotes = () => {\n        if (!notes) return null\n        return notesToShow().map(note => {\n            return (\n                <Note \n                    key={note.id} \n                    note={note} \n                    toggleImportance={() => toggleImportance(note.id)} \n                />\n            )\n        })\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={error} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show { showAll ? 'important' : 'all' }\n                </button>\n            </div>\n            <ul>\n                {renderNotes()}\n            </ul>\n            <form onSubmit={addNote}>\n                <input \n                    type=\"text\"\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">Save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}
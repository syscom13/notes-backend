{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["getAll","a","axios","get","response","data","create","newObject","post","update","id","put","remove","delete","Note","note","toggleImportance","handleDelete","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","error","setError","useEffect","fetchNotes","noteService","initialNotes","setTimeout","addNote","e","preventDefault","noteObject","Math","floor","random","date","Date","toISOString","returnedNote","concat","find","changedNote","map","filter","n","deleteNote","window","confirm","key","onSubmit","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef17e0cf.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = async () => {\n    const response = await axios.get(baseUrl)\n    return response.data\n}\n\nconst create = async newObject => {\n    const response = await axios.post(baseUrl, newObject)\n    return response.data\n}\n\nconst update = async (id, newObject) => {\n    const response = await axios.put(`${baseUrl}/${id}`, newObject)\n    return response.data\n}\n\nconst remove = async id => {\n    const response = await axios.delete(`${baseUrl}/${id}`)\n    return response.data\n}\n\nexport default {\n    getAll, create, update, remove\n}","import React from 'react'\n\nconst Note = ({ note, toggleImportance, handleDelete }) => {\n    const label = note.important ? 'make not important' : 'make important'\n\n    return (\n        <li className=\"note\">\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n            <button onClick={() => handleDelete(note)}>Delete</button>\n        </li>\n    )\n}\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n    \n    return (\n        <div style={footerStyle}>\n            <br/>\n            <em>Note app, department of computer science, University of Helsinki, 2020</em>\n        </div>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        const fetchNotes = async () => {\n            const initialNotes = await noteService.getAll()\n            setNotes(initialNotes)\n        }\n\n        try {\n            fetchNotes()\n        } catch (error) {\n            setError('Initial notes could not be fetched')\n            setTimeout(() => {\n                setError(null)\n            }, 5000)\n        }\n\n    }, [])\n\n    const addNote = async e => {\n        e.preventDefault()\n\n        const noteObject = {\n            id: Math.floor(Math.random()*10000),\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5\n        }\n\n        try {\n            const returnedNote = await noteService.create(noteObject)\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        } catch (error) {\n            setError(`\"${noteObject.content}\" could not be added to the database`)\n            setTimeout(() => {\n                setError(null)\n            }, 5000)\n        }\n    }\n\n    const handleNoteChange = e => {\n        setNewNote(e.target.value)\n    }\n\n    const toggleImportance = async id => {\n        const note = notes.find(note => note.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        try {\n            const returnedNote = await noteService.update(id, changedNote)\n            setNotes(notes.map(note => note.id === id ? returnedNote : note))\n        } catch (error) {\n            setError(`The note \"${note.content}\" was already deleted from the server`)\n            setTimeout(() => {\n                setError(null)\n            }, 5000)\n            setNotes(notes.filter(n => n.id !== note.id))\n        }\n    }\n\n    const deleteNote = async note => {\n        const { content, id } = note\n        const confirmed = window.confirm(`Are you sure you want to delete \"${content}\"?`)\n\n        if (confirmed) {\n            try {\n                await noteService.remove(id)\n                setNotes(notes.filter(n => n.id !== id))\n            } catch (error) {\n                setError(`${content} could not be removed`)\n                setTimeout(() => {\n                    setError(null)\n                }, 5000)\n            }\n        }\n    }\n\n    const notesToShow = () => showAll ? notes : notes.filter(note => note.important)\n\n    const renderNotes = () => {\n        if (!notes) return null\n        return notesToShow().map(note => {\n            return (\n                <Note \n                    key={note.id} \n                    note={note} \n                    toggleImportance={() => toggleImportance(note.id)} \n                    handleDelete={deleteNote}\n                />\n            )\n        })\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={error} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show { showAll ? 'important' : 'all' }\n                </button>\n            </div>\n            <ul>\n                {renderNotes()}\n            </ul>\n            <form onSubmit={addNote}>\n                <input \n                    type=\"text\"\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">Save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}